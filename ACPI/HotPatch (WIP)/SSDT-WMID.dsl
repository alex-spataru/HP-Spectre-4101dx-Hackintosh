/*
 * Copyright (c) 2020 Alex Spataru <https://github.com/alex-spataru>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef NO_DEFINITIONBLOCK
DefinitionBlock("", "SSDT", 2, "hack", "WMID", 0)
{
#endif
    External (_SB.WMID, DeviceObj)

    Scope (_SB.WMID)    {
        Method (GBIF, 1, NotSerialized)            {                Store ("HP WMI Command 0x7 (BIOS Read)", Debug)                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)                If (LNot (^^PCI0.LPCB.EC0.ECOK))                {                    Store (Package (0x02)                        {                            0x0D,                             Zero                        }, Local0)                    Sleep (0x96)                    Release (^^PCI0.LPCB.EC0.MUT1)                    Return (Local0)                }                If (Arg0)                {                    Store (Package (0x02)                        {                            0x06,                             Zero                        }, Local0)                    Sleep (0x96)                    Release (^^PCI0.LPCB.EC0.MUT1)                    Return (Local0)                }                If (LNot (^^PCI0.LPCB.EC0.MBTS))                {                    Store (Package (0x02)                        {                            0x34,                             Zero                        }, Local0)                    Sleep (0x96)                    Release (^^PCI0.LPCB.EC0.MUT1)                    Return (Local0)                }                If (LNotEqual (^^PCI0.LPCB.EC0.BTVD, One))                {                    Store (Package (0x02)                        {                            0x37,                             Zero                        }, Local0)                    Sleep (0x96)                    Release (^^PCI0.LPCB.EC0.MUT1)                    Return (Local0)                }                ElseIf (LEqual (And (^^PCI0.LPCB.EC0.MBDC, 0x10), 0x10))                {                    Store (Package (0x02)                        {                            0x36,                             Zero                        }, Local0)                    Sleep (0x96)                    Release (^^PCI0.LPCB.EC0.MUT1)                    Return (Local0)                }                Store (Package (0x03)                    {                        Zero,                         0x80,                         Buffer (0x80){}                    }, Local0)                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x18, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), One))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), Zero))                Store (B1B2(^^PCI0.LPCB.EC0.FCC0,^^PCI0.LPCB.EC0.FCC1), Local1)                ShiftRight (Local1, 0x05, Local1)                ShiftLeft (Local1, 0x05, Local1)                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x03))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x02))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0F, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x05))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x04))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0C, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x07))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x06))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x17, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x09))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x08))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x08, RefOf (Local1))                Subtract (Local1, 0x0AAA, Local1)                Divide (Local1, 0x0A, Local2, Local1)                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0B))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0A))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x09, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0D))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0C))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0A, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0F))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0E))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x19, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x11))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x10))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x16, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x13))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x12))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3F, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x15))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x14))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3E, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x17))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x16))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3D, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x19))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x18))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3C, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x1B))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x1A))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x1C, RefOf (Local1))                Store (ITOS (ToBCD (Local1)), Local3)                Store (0x1C, Local2)                Store (Zero, Local4)                Store (SizeOf (Local3), Local1)                While (Local1)                {                    GBFE (Local3, Local4, RefOf (Local5))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)                    Decrement (Local1)                    Increment (Local2)                    Increment (Local4)                }                Store (0x20, Index (DerefOf (Index (Local0, 0x02)), Local2))                Increment (Local2)                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x1B, RefOf (Local1))                And (Local1, 0x1F, Local7)                Store (ITOS (ToBCD (Local7)), Local6)                And (Local1, 0x01E0, Local7)                ShiftRight (Local7, 0x05, Local7)                Store (ITOS (ToBCD (Local7)), Local5)                ShiftRight (Local1, 0x09, Local7)                Add (Local7, 0x07BC, Local7)                Store (ITOS (ToBCD (Local7)), Local4)                Store (0x02, Local1)                Store (0x03, Local7)                While (Local1)                {                    GBFE (Local5, Local7, RefOf (Local3))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)                    Decrement (Local1)                    Increment (Local2)                    Increment (Local7)                }                Store ("/", Index (DerefOf (Index (Local0, 0x02)), Local2))                Increment (Local2)                Store (0x02, Local1)                Store (0x03, Local7)                While (Local1)                {                    GBFE (Local6, Local7, RefOf (Local3))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)                    Decrement (Local1)                    Increment (Local2)                    Increment (Local7)                }                Store ("/", Index (DerefOf (Index (Local0, 0x02)), Local2))                Increment (Local2)                Store (0x04, Local1)                Store (One, Local7)                While (Local1)                {                    GBFE (Local4, Local7, RefOf (Local3))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)                    Decrement (Local1)                    Increment (Local2)                    Increment (Local7)                }                Store (Zero, Index (DerefOf (Index (Local0, 0x02)), Local2))                ^^PCI0.LPCB.EC0.SMRD (0x0B, 0x16, 0x20, RefOf (Local1))                Store (SizeOf (Local1), Local3)                Store (0x2C, Local2)                Store (Zero, Local4)                While (Local3)                {                    GBFE (Local1, Local4, RefOf (Local5))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)                    Decrement (Local3)                    Increment (Local2)                    Increment (Local4)                }                ^^PCI0.LPCB.EC0.SMRD (0x0B, 0x16, 0x70, RefOf (Local1))                GBFE (Local1, Zero, RefOf (Local5))                If (LEqual (Local5, 0x36))                {                    Store (SizeOf (Local1), Local3)                    Store (0x3E, Local2)                    Store (Zero, Local4)                }                Else                {                    Store (0x03, Local3)                    Store (0x3E, Local2)                    Store (Zero, Local4)                    Store (Buffer (0x04)                        {                            "N/A"                        }, Local1)                }                While (Local3)                {                    GBFE (Local1, Local4, RefOf (Local5))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)                    Decrement (Local3)                    Increment (Local2)                    Increment (Local4)                }                ^^PCI0.LPCB.EC0.SMRD (0x0B, 0x16, 0x21, RefOf (Local1))                Store (SizeOf (Local1), Local3)                Store (0x4F, Local2)                Store (Zero, Local4)                While (Local3)                {                    GBFE (Local1, Local4, RefOf (Local5))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)                    Decrement (Local3)                    Increment (Local2)                    Increment (Local4)                }                ^^PCI0.LPCB.EC0.SMRD (0x0B, 0x16, 0x22, RefOf (Local1))                Store (SizeOf (Local1), Local3)                Store (0x56, Local2)                Store (Zero, Local4)                While (Local3)                {                    GBFE (Local1, Local4, RefOf (Local5))                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)                    Decrement (Local3)                    Increment (Local2)                    Increment (Local4)                }                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, Zero, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x5B))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x5A))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x1B, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x5D))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x5C))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x14, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x5F))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x5E))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x15, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x61))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x60))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0B, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x63))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x62))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x11, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x65))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x64))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x12, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x67))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x66))                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x13, RefOf (Local1))                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x69))                Store (Local2, Index (DerefOf (Index (Local0, 0x02)), 0x68))                Store (One, Index (DerefOf (Index (Local0, 0x02)), 0x6A))                Sleep (0x96)                Release (^^PCI0.LPCB.EC0.MUT1)                Return (Local0)            }
            
            Method (GBCO, 0, Serialized)            {                Store ("HP WMI Command 0x2B (BIOS Read)", Debug)                Store (Package (0x03)                    {                        Zero,                         0x04,                         Buffer (0x04){}                    }, Local0)                If (LEqual (^^PCI0.LPCB.EC0.ECOK, One))                {                    If (^^PCI0.LPCB.EC0.MBTS)                    {                        If (^^PCI0.LPCB.EC0.BTVD)                        {                            If (^^PCI0.LPCB.EC0.ACCC)                            {                                Store (^^PCI0.LPCB.EC0.MBST, Local2)                                And (Local2, 0x03, Local2)                                Switch (Local2)                                {                                    Case (Zero)                                    {                                        Store (^^PCI0.LPCB.EC0.BDVO, Local1)                                        If (LEqual (Local1, 0xC5))                                        {                                            Store (0x04, Local1)                                        }                                        Else                                        {                                            Store (Zero, Local1)                                        }                                    }                                    Case (One)                                    {                                        Store (0x02, Local1)                                    }                                    Case (0x02)                                    {                                        Store (B1B2(^^PCI0.LPCB.EC0.CUR0,^^PCI0.LPCB.EC0.CUR1), Local2)                                        Store (0xC3, Local3)                                        If (And (LLessEqual (Local2, 0x0200), LEqual (^^PCI0.LPCB.EC0.BDVO, Local3)))                                        {                                            Store (0x03, Local1)                                        }                                        Else                                        {                                            Store (One, Local1)                                        }                                    }                                    Default                                    {                                        Store (0x37, Index (DerefOf (Index (Local0, Zero)), Zero))                                    }                                }                            }                            Else                            {                                Store (0x02, Local1)                            }                        }                        Else                        {                            Store (0x37, Index (DerefOf (Index (Local0, Zero)), Zero))                        }                    }                    Else                    {                        Store (0xFF, Local1)                    }                    Store (Local1, Index (DerefOf (Index (Local0, 0x02)), Zero))                    Store (0xFF, Index (DerefOf (Index (Local0, 0x02)), One))                }                Else                {                    Store (0x35, Index (DerefOf (Index (Local0, Zero)), Zero))                }                Return (Local0)            }     
    }
#ifndef NO_DEFINITIONBLOCK
}
#endif